///////////////////////////////////////////
/////////Работа с SQL///////////
///////////////////////////////////////////

Функция СоединениеНачальнаяИнициализация()   Экспорт
	// создадим структуру с информацией о текущем соединении
	СоединениеТекущее = Новый Структура;
	СоединениеТекущее.Вставить("Соединение",          Неопределено); // Com объект AdoDB.Connection
	СоединениеТекущее.Вставить("Команда",             Неопределено); // Com объект AdoDB.Command
	СоединениеТекущее.Вставить("Активно",             Ложь);         // Активно ли текущее соединение
	СоединениеТекущее.Вставить("Шаблон",              Неопределено); // Загруженный шаблон из макета
	
	Возврат СоединениеТекущее; 
КонецФункции // СоединениеНачальнаяИнициализация()

Процедура СоединениеЗакрыть(СоединениеТекущее)  Экспорт
	// если была открыта транзакция, отменим ее
	Если СоединениеТекущее.Активно тогда
		СоединениеТекущее.Соединение.Close();
	КонецЕсли;
	// очистим структуру текущего соединения
	СоединениеТекущее.Соединение          = Неопределено;
	СоединениеТекущее.Команда             = Неопределено;
	СоединениеТекущее.Активно             = Ложь;
	СоединениеТекущее.Шаблон              = Неопределено;
	
КонецПроцедуры // СоединениеЗакрыть()

Процедура СоединениеОткрыть(СоединениеТекущее, СтрокаСоединения)  Экспорт
	// закроем предыдущее если оно было открыто
	ИмяШаблона = "vlh_Шаблоны_MSSQL";
	СоединениеЗакрыть(СоединениеТекущее);
	
	// откроем шаблон работы с выбранным сервером
	Попытка
		СоединениеТекущее.Шаблон = КонфигурацияЗагрузитьИзМакета(ИмяШаблона);
	Исключение
		ВызватьИсключение("Ошибка чтения параметров работы с сервером из макета " + ИмяШаблона + "
		|" + ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		// откроем соединение
		СоединениеТекущее.Соединение = Новый COMОбъект("ADODB.Connection");
		СоединениеТекущее.Соединение.ConnectionString  = СтрокаСоединения;
		
		СоединениеТекущее.Соединение.Open();
		ТаймаутКоманды = СоединениеТекущее.Соединение.CommandTimeout;
		ТаймаутСоединения = СоединениеТекущее.Соединение.ConnectionTimeout;
		
		СоединениеТекущее.Активно = Истина;
		
		// создадим объект ADODB.Command
		СоединениеСоздатьКоманду(СоединениеТекущее);
		
		
		мСоединениеТипыЧисловые   = СоединениеПараметр(СоединениеТекущее, "Типы", "Числовые");
		мСоединениеТипыСДлиной    = СоединениеПараметр(СоединениеТекущее, "Типы", "СДлиной");
		мСоединениеИндексСписком  = (СоединениеПараметр(СоединениеТекущее, "Индексы", "ИндексСписком", "") = "1");
		мСоединениеОсобыйБинарный = (СоединениеПараметр(СоединениеТекущее, "Типы", "ОсобыйБинарный", "") = "1");
		
	Исключение
		СтрОшибка = "Ошибка при установление связи по строке соединения '" + СтрокаСоединения + "'" + Символы.ПС + ОписаниеОшибки();
		СоединениеТекущее.Соединение = Неопределено;
		ВызватьИсключение(СтрОшибка);
	КонецПопытки;
КонецПроцедуры // СоединениеОткрыть

// Загрузить конфигурационные параметры из макета
Функция КонфигурацияЗагрузитьИзМакета(ИмяМакета)  
	Секции = Новый Соответствие;
	ТекущаяСекция = Неопределено;
	ТекущийПараметр = Неопределено;
	ИмяСекции = "";
	
	Попытка
		Макет = ПолучитьОбщийМакет(ИмяМакета);
		Для Сч=1 По Макет.КоличествоСтрок() Цикл
			Стр = Макет.ПолучитьСтроку(Сч);
			СтрОшибки = "В строке № " + Сч + ": '" + Стр + "' ";
			
			Если (Лев(Стр,1) = "#") ИЛИ (ПустаяСтрока(Стр)) Тогда
				// комментарии и пустые строки пропускаем
				Продолжить;
			ИначеЕсли Лев(Стр,1) = "[" Тогда
				// начало секции
				Если Прав(Стр,1) <> "]" Тогда
					ВызватьИсключение(СтрОшибки + "нет завершающего символа ]");
				КонецЕсли;
				ИмяСекции = СокрЛП(Сред(Стр, 2, СтрДлина(Стр)-2));
				
				// проверим, может уже с таким именем была задана секция
				Если Секции.Получить(ИмяСекции) <> Неопределено Тогда
					ВызватьИсключение(СтрОшибки+"повторно задана секция "+ИмяСекции);
				КонецЕсли;
				
				// вставим новую секцию
				ТекущаяСекция = Новый Соответствие;
				Секции.Вставить(ИмяСекции, ТекущаяСекция);
				ТекущийПараметр = Неопределено;
			ИначеЕсли (Лев(Стр,1) <> " ") И (Лев(Стр,1) <> Символы.Таб) Тогда
				// это должно быть начало параметра
				Поз = Найти(Стр,"=");
				Если Поз = 0 Тогда
					ВызватьИсключение(СтрОшибки + "не найден символ '='");
				КонецЕсли;
				
				ИмяПараметра = СокрЛП(Лев(Стр,Поз-1));
				Значение = СокрЛП(Сред(Стр,Поз+1));
				
				// проверим, установлена ли текущая секция
				Если ТекущаяСекция = Неопределено Тогда
					ВызватьИсключение(СтрОшибки + "задается параметр до начала секций");
				КонецЕсли;
				// проверим, может параметр с таким именем уже задан в этой секции
				Если ТекущаяСекция.Получить(ИмяПараметра) <> Неопределено Тогда
					ВызватьИсключение(СтрОшибки+"в секции "+ИмяСекции+" повторно задан параметр "+ИмяПараметра);
				КонецЕсли;
				
				// вставим новый параметр
				ТекущийПараметр = ИмяПараметра;
				ТекущаяСекция.Вставить(ИмяПараметра, Значение);
			Иначе
				// это продолжение предыдущего параметра
				Если ТекущийПараметр = Неопределено Тогда
					ВызватьИсключение(СтрОшибки + "продолжение параметра до его задания");
				КонецЕсли;
				
				// добавим новую строку в значение параметра
				Значение = ТекущаяСекция.Получить(ИмяПараметра);
				ТекущаяСекция.Вставить(ИмяПараметра, Значение + Символы.ПС + Стр);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВызватьИсключение("Ошибка при чтении макета " + ИмяМакета + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Секции;
КонецФункции

Функция ЗапросСкалярныйПараметр(Знач текстзапроса,имя_парам,зн_парам,какЕсть=ложь)  Экспорт
	// приводим значения к строке
	Если какЕсть тогда   
		Если ТипЗнч(зн_парам)=Тип("Число") Тогда
			прив_зн = стрзаменить(Формат(зн_парам,"ЧГ=0"),",",".");
		Иначе
			прив_зн = зн_парам;
		КонецЕсли;
		текстзапроса = СтрЗаменить(текстзапроса,имя_парам,прив_зн);
		Возврат текстзапроса;
	КонецЕсли;
	Если ТипЗнч(зн_парам)=Тип("Дата") тогда
		прив_зн = "'"+Формат(зн_парам,"ДФ=yyyy-MM-dd")+"'";
	Иначе	
		прив_зн = "'"+сокрЛП(зн_парам)+"'";
	КонецЕсли;	
	текстзапроса = СтрЗаменить(текстзапроса,имя_парам,прив_зн);
	Возврат текстзапроса;
КонецФункции // СоединениеСоздатьКоманду()

Процедура СоединениеСоздатьКоманду(СоединениеТекущее)
	СоединениеТекущее.Команда                  = Новый COMОбъект("ADODB.Command");
	СоединениеТекущее.Команда.ActiveConnection = СоединениеТекущее.Соединение;
	СоединениеТекущее.Команда.CommandTimeout   = 60;//СоединениеТекущее.Соединение.CommandTimeout;
КонецПроцедуры // СоединениеСоздатьКоманду()

Функция СоединениеПараметр(СоединениеТекущее, ИмяСекции, ИмяПараметра, ПоУмолчанию = Неопределено)
	// проверим, загружен ли шаблон
	Шаблон = СоединениеТекущее.Шаблон;
	Если Шаблон = Неопределено Тогда
		ВызватьИсключение("Попытка получить значение параметра " + ИмяСекции + "." + ИмяПараметра + " при не загруженном шаблоне");
	КонецЕсли;
	
	// проверим, есть ли секция
	ИмяШаблона = "vlh_Шаблоны_MSSQL";
	Секция = Шаблон.Получить(ИмяСекции);
	Если Секция = Неопределено Тогда
		ВызватьИсключение("В шаблоне " + ИмяШаблона + " отсутствует секция " + ИмяСекции);
	КонецЕсли;
	
	// получим значение
	Значение = Секция.Получить(ИмяПараметра);
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	Иначе
		Если ПоУмолчанию = Неопределено Тогда
			ВызватьИсключение("В шаблоне " + ИмяШаблона + " в секции " + ИмяСекции + " отсутствует параметр " + ИмяПараметра);
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
КонецФункции // СоединениеПараметр()

Процедура ЗапросыПередВыполнением(СоединениеТекущее)
	Если Не СоединениеТекущее.Активно Тогда
		ВызватьИсключение("Попытка выполнить запрос когда не установлено соединение!");
		Возврат;
	КонецЕсли;
КонецПроцедуры // ЗапросыПередВыполнением()

Функция COMSafeArrayВСтроку(Значение)
	Стр = "";
	Длина = Значение.GetLength();
	Для Сч=1 По Длина/2 Цикл
		Стр = Стр + Символ(Значение.GetValue(2*Сч-2)*256 + Значение.GetValue(2*Сч-1));
	КонецЦикла;
	
	Возврат Стр;
КонецФункции // COMSafeArrayВСтроку()

Процедура ОтправитьКоманду(СоединениеТекущее, ТекстЗапроса) Экспорт 
	// выполним проверку перед выполнением запроса
	ЗапросыПередВыполнением(СоединениеТекущее);
	СоединениеТекущее.Команда.CommandText = ТекстЗапроса;
	СоединениеТекущее.Команда.Execute();
	
КонецПроцедуры // ОтправитьКоманду()

Функция ЗапросыПолучитьТаблицу(СоединениеТекущее, ТекстЗапроса)  Экспорт
	// выполним проверку перед выполнением запроса
	ЗапросыПередВыполнением(СоединениеТекущее);
	ПреобразовыватьСтроку=Истина;
	
	ТабЗн = Новый ТаблицаЗначений;
	
	// выполним текст запроса
	СоединениеТекущее.Команда.CommandText = ТекстЗапроса;
	Результат = СоединениеТекущее.Команда.Execute();
	Если Результат.BOF или Результат.EOF тогда
		Возврат ТабЗн;
	КонецЕсли;	
	Результат.MoveFirst();
	
	// создадим таблицу для возвращения результата
	
	Для Сч=0 По Результат.Fields.Count-1 Цикл
		новКол = ТабЗн.Колонки.Добавить();
		
		Кол = Результат.Fields(Сч);
		ИмяВсе = Кол.Name;
		
		Поз = Найти(ИмяВсе,"_");
		
		Если Поз>0 тогда
			Имя = Лев(ИмяВсе,Поз-1);
			Ширина = Сред(ИмяВсе,Поз+1);
			новКол.Имя=ИмяВсе;
			новКол.Заголовок = Имя;
		Иначе
			новКол.Имя=ИмяВсе;
			новКол.Заголовок = ИмяВсе;
		КонецЕсли;
	КонецЦикла;
	
	Результат.MoveFirst();
	
	// заполним таблицу
	Пока Не Результат.EOF Цикл
		новСтр = ТабЗн.Добавить();
		Для Сч=0 По Результат.Fields.Count-1 Цикл
			Значение = Результат.Fields(Сч).Value;
			
			Если ПреобразовыватьСтроку И ТипЗнч(Значение) = Тип("COMSafeArray") Тогда
				Значение = COMSafeArrayВСтроку(Значение);
			КонецЕсли;
			
			новСтр.Установить(Сч, Значение);
		КонецЦикла;
		
		Результат.MoveNext();
	КонецЦикла;
	Результат = Неопределено;
	
	Возврат ТабЗн;
КонецФункции // ЗапросыПолучитьТаблицу()

Процедура ВыполнитьХранимуюПроцедуру(СоединениеТекущее, ТекстЗапроса, СписокПараметров)  Экспорт
	// выполним проверку перед выполнением запроса
	ЗапросыПередВыполнением(СоединениеТекущее);
	ПреобразовыватьСтроку=Истина;
	
	ТабЗн = Новый ТаблицаЗначений;
	
	// выполним текст запроса
	СоединениеТекущее.Команда.CommandText = ТекстЗапроса;
	СоединениеТекущее.Команда.CommandType = 4;
	СоединениеТекущее.Команда.Parameters.Refresh();
	
	Для каждого стр Из СписокПараметров Цикл
		СоединениеТекущее.Команда.Parameters.Item(стр.Имя).value = стр.Значение;
	КонецЦикла;
	СоединениеТекущее.Команда.Execute();
КонецПроцедуры // ЗапросыПолучитьТаблицу()

Функция ВыполнитьХранимуюПроцедуруВозвращающуюТабличноеЗначение(СоединениеТекущее, ТекстЗапроса, СписокПараметров, Таймаут = Неопределено)  Экспорт
	// выполним проверку перед выполнением запроса
	ЗапросыПередВыполнением(СоединениеТекущее);
	ПреобразовыватьСтроку=Истина;
	
	ТабЗн = Новый ТаблицаЗначений;
	
	// выполним текст запроса
	СоединениеТекущее.Команда.CommandText = ТекстЗапроса;
	СоединениеТекущее.Команда.CommandType = 4;
	СоединениеТекущее.Команда.Parameters.Refresh();
	Если Таймаут <> Неопределено Тогда
		СоединениеТекущее.Команда.CommandTimeout = Таймаут; 
	КонецЕсли;	
	Для каждого стр Из СписокПараметров Цикл
		СоединениеТекущее.Команда.Parameters.Item(стр.Имя).value = стр.Значение;
	КонецЦикла;
	//ТабЗн = СоединениеТекущее.Команда.Execute();
 
	//Результат = Новый COMОбъект("ADODB.RecordSet");

	Результат = СоединениеТекущее.Команда.Execute();
	Если Результат.BOF или Результат.EOF тогда
		Возврат ТабЗн;
	КонецЕсли;	
	//Результат.MoveFirst();
	
	// создадим таблицу для возвращения результата
	
	Для Сч=0 По Результат.Fields.Count-1 Цикл
		новКол = ТабЗн.Колонки.Добавить();
		
		Кол = Результат.Fields(Сч);
		ИмяВсе = Кол.Name;
		
		Поз = Найти(ИмяВсе,"_");
		
		Если Поз>0 тогда
			Имя = Лев(ИмяВсе,Поз-1);
			Ширина = Сред(ИмяВсе,Поз+1);
			новКол.Имя=ИмяВсе;
			новКол.Заголовок = Имя;
		Иначе
			новКол.Имя=ИмяВсе;
			новКол.Заголовок = ИмяВсе;
		КонецЕсли;
	КонецЦикла;
	
	//Результат.MoveFirst();
	
	// заполним таблицу
	Пока Не Результат.EOF Цикл
		новСтр = ТабЗн.Добавить();
		Для Сч=0 По Результат.Fields.Count-1 Цикл
			Значение = Результат.Fields(Сч).Value;
			
			Если ПреобразовыватьСтроку И ТипЗнч(Значение) = Тип("COMSafeArray") Тогда
				Значение = COMSafeArrayВСтроку(Значение);
			КонецЕсли;
			
			новСтр.Установить(Сч, Значение);
		КонецЦикла;
		
		Результат.MoveNext();
	КонецЦикла;
	Результат = Неопределено;
    Возврат ТабЗн;
КонецФункции // ЗапросыПолучитьТаблицу()

Функция ПолучитьТаблицуПараметровДляХранимыхПроцедур() Экспорт
	
	СписокПараметров = Новый ТаблицаЗначений;
	СписокПараметров.Колонки.Добавить("Имя");
	СписокПараметров.Колонки.Добавить("Значение");
	
	Возврат  СписокПараметров;
	
КонецФункции

Процедура ВыполнитьЗапрос(СоединениеТекущее, ТекстЗапроса)  Экспорт
	// выполним проверку перед выполнением запроса
	ЗапросыПередВыполнением(СоединениеТекущее);
	// выполним текст запроса
	СоединениеТекущее.Команда.CommandText = ТекстЗапроса;
	Результат = СоединениеТекущее.Команда.Execute();
	
КонецПроцедуры // ЗапросыПолучитьТаблицу()

Функция СформироватьСтрокуПодключения(Сервер, БазаДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	vlh_НастройкиПодключенияКБазамДанныхSQL.Сервер КАК Сервер,
		|	vlh_НастройкиПодключенияКБазамДанныхSQL.БазаДанных КАК БазаДанных,
		|	vlh_НастройкиПодключенияКБазамДанныхSQL.Пользователь КАК Пользователь,
		|	vlh_НастройкиПодключенияКБазамДанныхSQL.Пароль КАК Пароль
		|ИЗ
		|	РегистрСведений.vlh_НастройкиПодключенияКБазамДанныхSQL КАК vlh_НастройкиПодключенияКБазамДанныхSQL
		|ГДЕ
		|	vlh_НастройкиПодключенияКБазамДанныхSQL.Сервер = &Сервер
		|	И vlh_НастройкиПодключенияКБазамДанныхSQL.БазаДанных = &БазаДанных";
	
	Запрос.УстановитьПараметр("БазаДанных", БазаДанных);
	Запрос.УстановитьПараметр("Сервер", Сервер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтрокаСоединения = "";
	
	Если ВыборкаДетальныеЗаписи.Следующий() ТОгда
		СтрокаСоединения = "Driver={SQL Server};Server="+ВыборкаДетальныеЗаписи.Сервер+
											";DATABASE="+ВыборкаДетальныеЗаписи.БазаДанных+
											";UID="+ВыборкаДетальныеЗаписи.Пользователь+
											";PWD="+ВыборкаДетальныеЗаписи.Пароль;
 	КонецЕсли;
	
	Возврат СтрокаСоединения;

	
КонецФункции